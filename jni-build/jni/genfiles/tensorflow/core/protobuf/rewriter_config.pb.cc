// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/rewriter_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tensorflow/core/protobuf/rewriter_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
class AutoParallelOptionsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AutoParallelOptions>
     _instance;
} _AutoParallelOptions_default_instance_;
class RewriterConfigDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RewriterConfig>
     _instance;
} _RewriterConfig_default_instance_;

namespace protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoParallelOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoParallelOptions, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoParallelOptions, num_replicas_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, optimize_tensor_layout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, constant_folding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, arithmetic_optimization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, disable_model_pruning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, memory_optimization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, memory_optimizer_target_node_name_prefix_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, auto_parallel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewriterConfig, optimizers_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(AutoParallelOptions)},
  { 7, -1, sizeof(RewriterConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_AutoParallelOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RewriterConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tensorflow/core/protobuf/rewriter_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

GOOGLE_ATTRIBUTE_NOINLINE void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _AutoParallelOptions_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AutoParallelOptions_default_instance_);_RewriterConfig_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RewriterConfig_default_instance_);_RewriterConfig_default_instance_._instance.get_mutable()->auto_parallel_ = const_cast< ::tensorflow::AutoParallelOptions*>(
      ::tensorflow::AutoParallelOptions::internal_default_instance());
}

GOOGLE_ATTRIBUTE_NOINLINE void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n.tensorflow/core/protobuf/rewriter_conf"
      "ig.proto\022\ntensorflow\";\n\023AutoParallelOpti"
      "ons\022\016\n\006enable\030\001 \001(\010\022\024\n\014num_replicas\030\002 \001("
      "\005\"\211\004\n\016RewriterConfig\022\036\n\026optimize_tensor_"
      "layout\030\001 \001(\010\022;\n\020constant_folding\030\003 \001(\0162!"
      ".tensorflow.RewriterConfig.Toggle\022B\n\027ari"
      "thmetic_optimization\030\007 \001(\0162!.tensorflow."
      "RewriterConfig.Toggle\022\035\n\025disable_model_p"
      "runing\030\002 \001(\010\022B\n\023memory_optimization\030\004 \001("
      "\0162%.tensorflow.RewriterConfig.MemOptType"
      "\0220\n(memory_optimizer_target_node_name_pr"
      "efix\030\006 \001(\t\0226\n\rauto_parallel\030\005 \001(\0132\037.tens"
      "orflow.AutoParallelOptions\022\022\n\noptimizers"
      "\030d \003(\t\"&\n\006Toggle\022\013\n\007DEFAULT\020\000\022\006\n\002ON\020\001\022\007\n"
      "\003OFF\020\002\"M\n\nMemOptType\022\023\n\017DEFAULT_MEM_OPT\020"
      "\000\022\016\n\nNO_MEM_OPT\020\001\022\n\n\006MANUAL\020\002\022\016\n\nHEURIST"
      "ICS\020\003B5\n\030org.tensorflow.frameworkB\024Rewri"
      "terConfigProtosP\001\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 708);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tensorflow/core/protobuf/rewriter_config.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

GOOGLE_ATTRIBUTE_NOINLINE void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto

const ::google::protobuf::EnumDescriptor* RewriterConfig_Toggle_descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool RewriterConfig_Toggle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RewriterConfig_Toggle RewriterConfig::DEFAULT;
const RewriterConfig_Toggle RewriterConfig::ON;
const RewriterConfig_Toggle RewriterConfig::OFF;
const RewriterConfig_Toggle RewriterConfig::Toggle_MIN;
const RewriterConfig_Toggle RewriterConfig::Toggle_MAX;
const int RewriterConfig::Toggle_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RewriterConfig_MemOptType_descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::file_level_enum_descriptors[1];
}
bool RewriterConfig_MemOptType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RewriterConfig_MemOptType RewriterConfig::DEFAULT_MEM_OPT;
const RewriterConfig_MemOptType RewriterConfig::NO_MEM_OPT;
const RewriterConfig_MemOptType RewriterConfig::MANUAL;
const RewriterConfig_MemOptType RewriterConfig::HEURISTICS;
const RewriterConfig_MemOptType RewriterConfig::MemOptType_MIN;
const RewriterConfig_MemOptType RewriterConfig::MemOptType_MAX;
const int RewriterConfig::MemOptType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AutoParallelOptions::kEnableFieldNumber;
const int AutoParallelOptions::kNumReplicasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AutoParallelOptions::AutoParallelOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.AutoParallelOptions)
}
AutoParallelOptions::AutoParallelOptions(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.AutoParallelOptions)
}
AutoParallelOptions::AutoParallelOptions(const AutoParallelOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&enable_, &from.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_replicas_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(num_replicas_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.AutoParallelOptions)
}

void AutoParallelOptions::SharedCtor() {
  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_replicas_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(num_replicas_));
  _cached_size_ = 0;
}

AutoParallelOptions::~AutoParallelOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.AutoParallelOptions)
  SharedDtor();
}

void AutoParallelOptions::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

}

void AutoParallelOptions::ArenaDtor(void* object) {
  AutoParallelOptions* _this = reinterpret_cast< AutoParallelOptions* >(object);
  (void)_this;
}
void AutoParallelOptions::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AutoParallelOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoParallelOptions::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AutoParallelOptions& AutoParallelOptions::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

AutoParallelOptions* AutoParallelOptions::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<AutoParallelOptions>(arena);
}

void AutoParallelOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AutoParallelOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_replicas_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(num_replicas_));
  _internal_metadata_.Clear();
}

bool AutoParallelOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.AutoParallelOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_replicas = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_replicas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.AutoParallelOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.AutoParallelOptions)
  return false;
#undef DO_
}

void AutoParallelOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.AutoParallelOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // int32 num_replicas = 2;
  if (this->num_replicas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_replicas(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.AutoParallelOptions)
}

::google::protobuf::uint8* AutoParallelOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AutoParallelOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // int32 num_replicas = 2;
  if (this->num_replicas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_replicas(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AutoParallelOptions)
  return target;
}

size_t AutoParallelOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AutoParallelOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // int32 num_replicas = 2;
  if (this->num_replicas() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_replicas());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoParallelOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.AutoParallelOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const AutoParallelOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AutoParallelOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.AutoParallelOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.AutoParallelOptions)
    MergeFrom(*source);
  }
}

void AutoParallelOptions::MergeFrom(const AutoParallelOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AutoParallelOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.num_replicas() != 0) {
    set_num_replicas(from.num_replicas());
  }
}

void AutoParallelOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.AutoParallelOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoParallelOptions::CopyFrom(const AutoParallelOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AutoParallelOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoParallelOptions::IsInitialized() const {
  return true;
}

void AutoParallelOptions::Swap(AutoParallelOptions* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AutoParallelOptions* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void AutoParallelOptions::UnsafeArenaSwap(AutoParallelOptions* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AutoParallelOptions::InternalSwap(AutoParallelOptions* other) {
  using std::swap;
  swap(enable_, other->enable_);
  swap(num_replicas_, other->num_replicas_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AutoParallelOptions::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AutoParallelOptions

// bool enable = 1;
void AutoParallelOptions::clear_enable() {
  enable_ = false;
}
bool AutoParallelOptions::enable() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutoParallelOptions.enable)
  return enable_;
}
void AutoParallelOptions::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AutoParallelOptions.enable)
}

// int32 num_replicas = 2;
void AutoParallelOptions::clear_num_replicas() {
  num_replicas_ = 0;
}
::google::protobuf::int32 AutoParallelOptions::num_replicas() const {
  // @@protoc_insertion_point(field_get:tensorflow.AutoParallelOptions.num_replicas)
  return num_replicas_;
}
void AutoParallelOptions::set_num_replicas(::google::protobuf::int32 value) {
  
  num_replicas_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.AutoParallelOptions.num_replicas)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void RewriterConfig::_slow_mutable_auto_parallel() {
  auto_parallel_ = ::google::protobuf::Arena::CreateMessage< ::tensorflow::AutoParallelOptions >(
      GetArenaNoVirtual());
}
::tensorflow::AutoParallelOptions* RewriterConfig::_slow_release_auto_parallel() {
  if (auto_parallel_ == NULL) {
    return NULL;
  } else {
    ::tensorflow::AutoParallelOptions* temp = new ::tensorflow::AutoParallelOptions(*auto_parallel_);
    auto_parallel_ = NULL;
    return temp;
  }
}
::tensorflow::AutoParallelOptions* RewriterConfig::unsafe_arena_release_auto_parallel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RewriterConfig.auto_parallel)
  
  ::tensorflow::AutoParallelOptions* temp = auto_parallel_;
  auto_parallel_ = NULL;
  return temp;
}
void RewriterConfig::_slow_set_allocated_auto_parallel(
    ::google::protobuf::Arena* message_arena, ::tensorflow::AutoParallelOptions** auto_parallel) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*auto_parallel) == NULL) {
      message_arena->Own(*auto_parallel);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*auto_parallel)) {
      ::tensorflow::AutoParallelOptions* new_auto_parallel = 
            ::google::protobuf::Arena::CreateMessage< ::tensorflow::AutoParallelOptions >(
            message_arena);
      new_auto_parallel->CopyFrom(**auto_parallel);
      *auto_parallel = new_auto_parallel;
    }
}
void RewriterConfig::unsafe_arena_set_allocated_auto_parallel(
    ::tensorflow::AutoParallelOptions* auto_parallel) {
  if (GetArenaNoVirtual() == NULL) {
    delete auto_parallel_;
  }
  auto_parallel_ = auto_parallel;
  if (auto_parallel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RewriterConfig.auto_parallel)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RewriterConfig::kOptimizeTensorLayoutFieldNumber;
const int RewriterConfig::kConstantFoldingFieldNumber;
const int RewriterConfig::kArithmeticOptimizationFieldNumber;
const int RewriterConfig::kDisableModelPruningFieldNumber;
const int RewriterConfig::kMemoryOptimizationFieldNumber;
const int RewriterConfig::kMemoryOptimizerTargetNodeNamePrefixFieldNumber;
const int RewriterConfig::kAutoParallelFieldNumber;
const int RewriterConfig::kOptimizersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RewriterConfig::RewriterConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.RewriterConfig)
}
RewriterConfig::RewriterConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  optimizers_(arena) {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::InitDefaults();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RewriterConfig)
}
RewriterConfig::RewriterConfig(const RewriterConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      optimizers_(from.optimizers_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  memory_optimizer_target_node_name_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.memory_optimizer_target_node_name_prefix().size() > 0) {
    memory_optimizer_target_node_name_prefix_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.memory_optimizer_target_node_name_prefix(),
      GetArenaNoVirtual());
  }
  if (from.has_auto_parallel()) {
    auto_parallel_ = new ::tensorflow::AutoParallelOptions(*from.auto_parallel_);
  } else {
    auto_parallel_ = NULL;
  }
  ::memcpy(&optimize_tensor_layout_, &from.optimize_tensor_layout_,
    static_cast<size_t>(reinterpret_cast<char*>(&arithmetic_optimization_) -
    reinterpret_cast<char*>(&optimize_tensor_layout_)) + sizeof(arithmetic_optimization_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.RewriterConfig)
}

void RewriterConfig::SharedCtor() {
  memory_optimizer_target_node_name_prefix_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&auto_parallel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&arithmetic_optimization_) -
      reinterpret_cast<char*>(&auto_parallel_)) + sizeof(arithmetic_optimization_));
  _cached_size_ = 0;
}

RewriterConfig::~RewriterConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.RewriterConfig)
  SharedDtor();
}

void RewriterConfig::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  GOOGLE_DCHECK(arena == NULL);
  if (arena != NULL) {
    return;
  }

  memory_optimizer_target_node_name_prefix_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) delete auto_parallel_;
}

void RewriterConfig::ArenaDtor(void* object) {
  RewriterConfig* _this = reinterpret_cast< RewriterConfig* >(object);
  (void)_this;
}
void RewriterConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RewriterConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewriterConfig::descriptor() {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RewriterConfig& RewriterConfig::default_instance() {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

RewriterConfig* RewriterConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RewriterConfig>(arena);
}

void RewriterConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RewriterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  optimizers_.Clear();
  memory_optimizer_target_node_name_prefix_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && auto_parallel_ != NULL) {
    delete auto_parallel_;
  }
  auto_parallel_ = NULL;
  ::memset(&optimize_tensor_layout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&arithmetic_optimization_) -
      reinterpret_cast<char*>(&optimize_tensor_layout_)) + sizeof(arithmetic_optimization_));
  _internal_metadata_.Clear();
}

bool RewriterConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.RewriterConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool optimize_tensor_layout = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optimize_tensor_layout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disable_model_pruning = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_model_pruning_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.Toggle constant_folding = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_constant_folding(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_memory_optimization(static_cast< ::tensorflow::RewriterConfig_MemOptType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.AutoParallelOptions auto_parallel = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_auto_parallel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string memory_optimizer_target_node_name_prefix = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_memory_optimizer_target_node_name_prefix()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->memory_optimizer_target_node_name_prefix().data(), static_cast<int>(this->memory_optimizer_target_node_name_prefix().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RewriterConfig.memory_optimizer_target_node_name_prefix"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_arithmetic_optimization(static_cast< ::tensorflow::RewriterConfig_Toggle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string optimizers = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_optimizers()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->optimizers(this->optimizers_size() - 1).data(),
            static_cast<int>(this->optimizers(this->optimizers_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.RewriterConfig.optimizers"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.RewriterConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.RewriterConfig)
  return false;
#undef DO_
}

void RewriterConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.RewriterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool optimize_tensor_layout = 1;
  if (this->optimize_tensor_layout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->optimize_tensor_layout(), output);
  }

  // bool disable_model_pruning = 2;
  if (this->disable_model_pruning() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->disable_model_pruning(), output);
  }

  // .tensorflow.RewriterConfig.Toggle constant_folding = 3;
  if (this->constant_folding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->constant_folding(), output);
  }

  // .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
  if (this->memory_optimization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->memory_optimization(), output);
  }

  // .tensorflow.AutoParallelOptions auto_parallel = 5;
  if (this->has_auto_parallel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->auto_parallel_, output);
  }

  // string memory_optimizer_target_node_name_prefix = 6;
  if (this->memory_optimizer_target_node_name_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->memory_optimizer_target_node_name_prefix().data(), static_cast<int>(this->memory_optimizer_target_node_name_prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.memory_optimizer_target_node_name_prefix");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->memory_optimizer_target_node_name_prefix(), output);
  }

  // .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
  if (this->arithmetic_optimization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->arithmetic_optimization(), output);
  }

  // repeated string optimizers = 100;
  for (int i = 0, n = this->optimizers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optimizers(i).data(), static_cast<int>(this->optimizers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.optimizers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      100, this->optimizers(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tensorflow.RewriterConfig)
}

::google::protobuf::uint8* RewriterConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RewriterConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool optimize_tensor_layout = 1;
  if (this->optimize_tensor_layout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->optimize_tensor_layout(), target);
  }

  // bool disable_model_pruning = 2;
  if (this->disable_model_pruning() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->disable_model_pruning(), target);
  }

  // .tensorflow.RewriterConfig.Toggle constant_folding = 3;
  if (this->constant_folding() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->constant_folding(), target);
  }

  // .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
  if (this->memory_optimization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->memory_optimization(), target);
  }

  // .tensorflow.AutoParallelOptions auto_parallel = 5;
  if (this->has_auto_parallel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->auto_parallel_, deterministic, target);
  }

  // string memory_optimizer_target_node_name_prefix = 6;
  if (this->memory_optimizer_target_node_name_prefix().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->memory_optimizer_target_node_name_prefix().data(), static_cast<int>(this->memory_optimizer_target_node_name_prefix().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.memory_optimizer_target_node_name_prefix");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->memory_optimizer_target_node_name_prefix(), target);
  }

  // .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
  if (this->arithmetic_optimization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->arithmetic_optimization(), target);
  }

  // repeated string optimizers = 100;
  for (int i = 0, n = this->optimizers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optimizers(i).data(), static_cast<int>(this->optimizers(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RewriterConfig.optimizers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(100, this->optimizers(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RewriterConfig)
  return target;
}

size_t RewriterConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RewriterConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string optimizers = 100;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->optimizers_size());
  for (int i = 0, n = this->optimizers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->optimizers(i));
  }

  // string memory_optimizer_target_node_name_prefix = 6;
  if (this->memory_optimizer_target_node_name_prefix().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->memory_optimizer_target_node_name_prefix());
  }

  // .tensorflow.AutoParallelOptions auto_parallel = 5;
  if (this->has_auto_parallel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->auto_parallel_);
  }

  // bool optimize_tensor_layout = 1;
  if (this->optimize_tensor_layout() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_model_pruning = 2;
  if (this->disable_model_pruning() != 0) {
    total_size += 1 + 1;
  }

  // .tensorflow.RewriterConfig.Toggle constant_folding = 3;
  if (this->constant_folding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->constant_folding());
  }

  // .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
  if (this->memory_optimization() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->memory_optimization());
  }

  // .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
  if (this->arithmetic_optimization() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->arithmetic_optimization());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewriterConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.RewriterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RewriterConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RewriterConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.RewriterConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.RewriterConfig)
    MergeFrom(*source);
  }
}

void RewriterConfig::MergeFrom(const RewriterConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RewriterConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  optimizers_.MergeFrom(from.optimizers_);
  if (from.memory_optimizer_target_node_name_prefix().size() > 0) {
    set_memory_optimizer_target_node_name_prefix(from.memory_optimizer_target_node_name_prefix());
  }
  if (from.has_auto_parallel()) {
    mutable_auto_parallel()->::tensorflow::AutoParallelOptions::MergeFrom(from.auto_parallel());
  }
  if (from.optimize_tensor_layout() != 0) {
    set_optimize_tensor_layout(from.optimize_tensor_layout());
  }
  if (from.disable_model_pruning() != 0) {
    set_disable_model_pruning(from.disable_model_pruning());
  }
  if (from.constant_folding() != 0) {
    set_constant_folding(from.constant_folding());
  }
  if (from.memory_optimization() != 0) {
    set_memory_optimization(from.memory_optimization());
  }
  if (from.arithmetic_optimization() != 0) {
    set_arithmetic_optimization(from.arithmetic_optimization());
  }
}

void RewriterConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.RewriterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewriterConfig::CopyFrom(const RewriterConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RewriterConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewriterConfig::IsInitialized() const {
  return true;
}

void RewriterConfig::Swap(RewriterConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RewriterConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RewriterConfig::UnsafeArenaSwap(RewriterConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RewriterConfig::InternalSwap(RewriterConfig* other) {
  using std::swap;
  optimizers_.InternalSwap(&other->optimizers_);
  memory_optimizer_target_node_name_prefix_.Swap(&other->memory_optimizer_target_node_name_prefix_);
  swap(auto_parallel_, other->auto_parallel_);
  swap(optimize_tensor_layout_, other->optimize_tensor_layout_);
  swap(disable_model_pruning_, other->disable_model_pruning_);
  swap(constant_folding_, other->constant_folding_);
  swap(memory_optimization_, other->memory_optimization_);
  swap(arithmetic_optimization_, other->arithmetic_optimization_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RewriterConfig::GetMetadata() const {
  protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tensorflow_2fcore_2fprotobuf_2frewriter_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RewriterConfig

// bool optimize_tensor_layout = 1;
void RewriterConfig::clear_optimize_tensor_layout() {
  optimize_tensor_layout_ = false;
}
bool RewriterConfig::optimize_tensor_layout() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.optimize_tensor_layout)
  return optimize_tensor_layout_;
}
void RewriterConfig::set_optimize_tensor_layout(bool value) {
  
  optimize_tensor_layout_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.optimize_tensor_layout)
}

// .tensorflow.RewriterConfig.Toggle constant_folding = 3;
void RewriterConfig::clear_constant_folding() {
  constant_folding_ = 0;
}
::tensorflow::RewriterConfig_Toggle RewriterConfig::constant_folding() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.constant_folding)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(constant_folding_);
}
void RewriterConfig::set_constant_folding(::tensorflow::RewriterConfig_Toggle value) {
  
  constant_folding_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.constant_folding)
}

// .tensorflow.RewriterConfig.Toggle arithmetic_optimization = 7;
void RewriterConfig::clear_arithmetic_optimization() {
  arithmetic_optimization_ = 0;
}
::tensorflow::RewriterConfig_Toggle RewriterConfig::arithmetic_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.arithmetic_optimization)
  return static_cast< ::tensorflow::RewriterConfig_Toggle >(arithmetic_optimization_);
}
void RewriterConfig::set_arithmetic_optimization(::tensorflow::RewriterConfig_Toggle value) {
  
  arithmetic_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.arithmetic_optimization)
}

// bool disable_model_pruning = 2;
void RewriterConfig::clear_disable_model_pruning() {
  disable_model_pruning_ = false;
}
bool RewriterConfig::disable_model_pruning() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.disable_model_pruning)
  return disable_model_pruning_;
}
void RewriterConfig::set_disable_model_pruning(bool value) {
  
  disable_model_pruning_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.disable_model_pruning)
}

// .tensorflow.RewriterConfig.MemOptType memory_optimization = 4;
void RewriterConfig::clear_memory_optimization() {
  memory_optimization_ = 0;
}
::tensorflow::RewriterConfig_MemOptType RewriterConfig::memory_optimization() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.memory_optimization)
  return static_cast< ::tensorflow::RewriterConfig_MemOptType >(memory_optimization_);
}
void RewriterConfig::set_memory_optimization(::tensorflow::RewriterConfig_MemOptType value) {
  
  memory_optimization_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.memory_optimization)
}

// string memory_optimizer_target_node_name_prefix = 6;
void RewriterConfig::clear_memory_optimizer_target_node_name_prefix() {
  memory_optimizer_target_node_name_prefix_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RewriterConfig::memory_optimizer_target_node_name_prefix() const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.memory_optimizer_target_node_name_prefix)
  return memory_optimizer_target_node_name_prefix_.Get();
}
void RewriterConfig::set_memory_optimizer_target_node_name_prefix(const ::std::string& value) {
  
  memory_optimizer_target_node_name_prefix_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.memory_optimizer_target_node_name_prefix)
}
#if LANG_CXX11
void RewriterConfig::set_memory_optimizer_target_node_name_prefix(::std::string&& value) {
  
  memory_optimizer_target_node_name_prefix_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.RewriterConfig.memory_optimizer_target_node_name_prefix)
}
#endif
void RewriterConfig::set_memory_optimizer_target_node_name_prefix(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  memory_optimizer_target_node_name_prefix_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:tensorflow.RewriterConfig.memory_optimizer_target_node_name_prefix)
}
void RewriterConfig::set_memory_optimizer_target_node_name_prefix(const char* value,
    size_t size) {
  
  memory_optimizer_target_node_name_prefix_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RewriterConfig.memory_optimizer_target_node_name_prefix)
}
::std::string* RewriterConfig::mutable_memory_optimizer_target_node_name_prefix() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.memory_optimizer_target_node_name_prefix)
  return memory_optimizer_target_node_name_prefix_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RewriterConfig::release_memory_optimizer_target_node_name_prefix() {
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.memory_optimizer_target_node_name_prefix)
  
  return memory_optimizer_target_node_name_prefix_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RewriterConfig::unsafe_arena_release_memory_optimizer_target_node_name_prefix() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tensorflow.RewriterConfig.memory_optimizer_target_node_name_prefix)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return memory_optimizer_target_node_name_prefix_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RewriterConfig::set_allocated_memory_optimizer_target_node_name_prefix(::std::string* memory_optimizer_target_node_name_prefix) {
  if (memory_optimizer_target_node_name_prefix != NULL) {
    
  } else {
    
  }
  memory_optimizer_target_node_name_prefix_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), memory_optimizer_target_node_name_prefix,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.memory_optimizer_target_node_name_prefix)
}
void RewriterConfig::unsafe_arena_set_allocated_memory_optimizer_target_node_name_prefix(
    ::std::string* memory_optimizer_target_node_name_prefix) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (memory_optimizer_target_node_name_prefix != NULL) {
    
  } else {
    
  }
  memory_optimizer_target_node_name_prefix_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      memory_optimizer_target_node_name_prefix, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tensorflow.RewriterConfig.memory_optimizer_target_node_name_prefix)
}

// .tensorflow.AutoParallelOptions auto_parallel = 5;
bool RewriterConfig::has_auto_parallel() const {
  return this != internal_default_instance() && auto_parallel_ != NULL;
}
void RewriterConfig::clear_auto_parallel() {
  if (GetArenaNoVirtual() == NULL && auto_parallel_ != NULL) delete auto_parallel_;
  auto_parallel_ = NULL;
}
const ::tensorflow::AutoParallelOptions& RewriterConfig::auto_parallel() const {
  const ::tensorflow::AutoParallelOptions* p = auto_parallel_;
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.auto_parallel)
  return p != NULL ? *p : *reinterpret_cast<const ::tensorflow::AutoParallelOptions*>(
      &::tensorflow::_AutoParallelOptions_default_instance_);
}
::tensorflow::AutoParallelOptions* RewriterConfig::mutable_auto_parallel() {
  
  if (auto_parallel_ == NULL) {
    _slow_mutable_auto_parallel();
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.auto_parallel)
  return auto_parallel_;
}
::tensorflow::AutoParallelOptions* RewriterConfig::release_auto_parallel() {
  // @@protoc_insertion_point(field_release:tensorflow.RewriterConfig.auto_parallel)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_auto_parallel();
  } else {
    ::tensorflow::AutoParallelOptions* temp = auto_parallel_;
    auto_parallel_ = NULL;
    return temp;
  }
}
 void RewriterConfig::set_allocated_auto_parallel(::tensorflow::AutoParallelOptions* auto_parallel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete auto_parallel_;
  }
  if (auto_parallel != NULL) {
    _slow_set_allocated_auto_parallel(message_arena, &auto_parallel);
  }
  auto_parallel_ = auto_parallel;
  if (auto_parallel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.RewriterConfig.auto_parallel)
}

// repeated string optimizers = 100;
int RewriterConfig::optimizers_size() const {
  return optimizers_.size();
}
void RewriterConfig::clear_optimizers() {
  optimizers_.Clear();
}
const ::std::string& RewriterConfig::optimizers(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.RewriterConfig.optimizers)
  return optimizers_.Get(index);
}
::std::string* RewriterConfig::mutable_optimizers(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.RewriterConfig.optimizers)
  return optimizers_.Mutable(index);
}
void RewriterConfig::set_optimizers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.optimizers)
  optimizers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void RewriterConfig::set_optimizers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:tensorflow.RewriterConfig.optimizers)
  optimizers_.Mutable(index)->assign(std::move(value));
}
#endif
void RewriterConfig::set_optimizers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  optimizers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tensorflow.RewriterConfig.optimizers)
}
void RewriterConfig::set_optimizers(int index, const char* value, size_t size) {
  optimizers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tensorflow.RewriterConfig.optimizers)
}
::std::string* RewriterConfig::add_optimizers() {
  // @@protoc_insertion_point(field_add_mutable:tensorflow.RewriterConfig.optimizers)
  return optimizers_.Add();
}
void RewriterConfig::add_optimizers(const ::std::string& value) {
  optimizers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tensorflow.RewriterConfig.optimizers)
}
#if LANG_CXX11
void RewriterConfig::add_optimizers(::std::string&& value) {
  optimizers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:tensorflow.RewriterConfig.optimizers)
}
#endif
void RewriterConfig::add_optimizers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  optimizers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tensorflow.RewriterConfig.optimizers)
}
void RewriterConfig::add_optimizers(const char* value, size_t size) {
  optimizers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tensorflow.RewriterConfig.optimizers)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
RewriterConfig::optimizers() const {
  // @@protoc_insertion_point(field_list:tensorflow.RewriterConfig.optimizers)
  return optimizers_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
RewriterConfig::mutable_optimizers() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.RewriterConfig.optimizers)
  return &optimizers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
